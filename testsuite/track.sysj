{
	/* N1 */
	signal a;
	signal b;
	signal ok1;
	signal ok2;
	signal enter;
	signal resv_next;
	signal bye;
	signal timeout;

	output signal A1ok;
	output signal A2ok;
	output signal go_ahead;

	output channel C1n;
	input channel C2p;
	signal t_D;
	{
		{ /* Train reaction */
			while(true){
				abort(enter && ok2){
					while(true){
						abort(a){while(true)pause;}
						emit ok1;
						X1: pause;
					}
				}
				emit A1ok;
				abort(resv_next){while(true)A: pause;}
				C1n!;
				emit go_ahead;
				abort(bye){while(true){emit t_D; D:pause;}}
			}
		}
		||
		{/* Interface reaction */
			while(true){
				abort(timeout){
					abort(enter && ok1){
						while(true){
							abort(b){while(true)pause;}
							emit ok2;
							X2: pause;
						}
					}
					emit A2ok;
					abort(bye){while(true)G:pause;}
				}
				C2p?;
			}
		}
	}
	||
	{
		/* Observer - LTL1 */
		while(true){
			abort(!t_D){while(true)P1:pause;}
			C1!;
		}
	}
	||
	{
		/* Environment */
		pause;
		emit a; emit b; emit enter;
		pause;
		emit resv_next;
		abort(go_ahead){while(true)pause;}
		pause;
		emit bye;
	}
}
><
{
	/* N2 */
	signal timeout;
	signal resv_next;
	signal resv_prev;
	signal go_ahead1;
	signal go_ahead2;
	signal enter;
	signal ok1;
	signal ok2;
	signal A1ok;
	signal A2ok;
	signal A3ok;
	input channel C1n;
	input channel C3p;
	output channel C2p;
	output channel C2n;
	input channel C1;
	output channel C2;
	signal a;
	signal b;

	signal t_D;
	signal t_G;
	signal BUG;

	signal EN1;
	{
		{/* Interface1 */
			while(true){
				C1n?;
				abort(timeout){
					abort(enter && ok1){
						while(true){
							abort(b){while(true){emit EN1; pause;}}
							emit ok2;
							X2: pause;
						}
					}
					emit A1ok;
					abort(bye){while(true){emit t_G; G:pause;}}
				}
			}
		}
		||
		{/* Train */
			while(true){
				abort(enter && ok2){
					while(true){
						abort(a){while(true)pause;}
						emit ok1;
						X1: pause;
					}
				}
				abort(resv_prev || resv_next){while(true)A:pause;}
				if(resv_prev){
					C2p!;
					emit go_ahead1;
				}
				else{
					if(resv_prev){
						C2n!;
						emit go_ahead2;
					}
				}
				abort(bye){while(true){emit t_D; D:pause;}}
			}
		}
		||
		{/* Interface2 */
			while(true){
				C3p?;
				abort(timeout){
					abort(enter && ok1){
						while(true){
							abort(b){while(true)pause;}
							emit ok2;
							X1: pause;
						}
					}
					emit A3ok;
					abort(bye){while(true)K:pause;}
				}
			}
		}
	}
	||
	{/* Observer - LTL2 */
		abort(t_G){
			while(true){
				abort(!t_D){while(true)P3:pause;}
				C2!;
			}
		}
		C1?;
		while(true){emit BUG; pause;}
	}
	||
	{ /* Environment */
		abort(EN1){while(true)pause;}
		pause;
		emit a; emit b; emit enter;
		pause;
		pause;
		emit resv_next;
		pause;
		pause;
		emit bye;
	}
}
><
{
	/* N1 */
	signal a;
	signal b;
	signal ok1;
	signal ok2;
	signal enter;
	signal resv_next;
	signal bye;
	signal timeout;

	output signal A1ok;
	output signal A2ok;
	output signal go_ahead;

	output channel C3p;
	input channel C2n;
	input channel C2;
	signal t_G;
	signal BUG;
	signal EN1;
	{
		{ /* Train reaction */
			while(true){
				abort(enter && ok2){
					while(true){
						abort(a){while(true)pause;}
						emit ok1;
						X1: pause;
					}
				}
				emit A1ok;
				abort(resv_next){while(true)A: pause;}
				C3p!;
				emit go_ahead;
				abort(bye){while(true)D:pause;}
			}
		}
		||
		{/* Interface reaction */
			while(true){
				C2n?;
				emit EN1;
				abort(timeout){
					abort(enter && ok1){
						while(true){
							abort(b){while(true)pause;}
							emit ok2;
							X2: pause;
						}
					}
					emit A2ok;
					abort(bye){while(true){emit t_G; G:pause;}}
				}
			}
		}
	}
	||
	{
		/* Observer - LTL3 */
		abort(t_G){while(true)P4:pause;}
		C2?;
		while(true){emit BUG; pause;}
	}
	||
	{ /* Environment */
		abort(EN1){while(true)pause;}
		pause;
		emit a; emit b; emit enter;
		pause;
		pause;
		emit resv_prev;
		pause;
		pause;
		emit bye;
	}

}
